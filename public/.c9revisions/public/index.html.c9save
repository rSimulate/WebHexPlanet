{"ts":1361471579213,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<!doctype html>\n<html>\n\t<head>\n\t\t<title>MetaSim - Alpha 0.6</title>\n\t\t<meta charset=\"utf-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\n\t\t\n\t\t\t\n\t\t<!--<script src=\"vendor/three.js/Three.js\"></script>-->\n\t\t<script src=\"vendor/three.js/three.min.js\"></script>\n\t\t<script src=\"vendor/three.js/three-extras.min.js\"></script>\n\t\t<script src=\"vendor/three.js/OrbitControls.js\"></script>\n\t\t<script src=\"vendor/three.js/Detector.js\"></script>\n\t\t<script src=\"vendor/dat.gui.min.js\"></script>\n\t\t<script src=\"vendor/three.js/Stats.js\"></script>\n\t\t<script src=\"vendor/threex/THREEx.screenshot.js\"></script>\n\t\t<script src=\"vendor/threex/THREEx.FullScreen.js\"></script>\n\t\t<script src=\"vendor/threex/THREEx.WindowResize.js\"></script>\n\t\t<script src=\"vendor/threex.dragpancontrols.js\"></script>\n\t\t<script src=\"js/main.js\"></script>\n\n\t\t<link  href=\"css/main.css\" rel=\"stylesheet\"/>\n\t</head>\n<body>\n\t<!-- three.js container -->\n    \t<div id=\"container\"></div>\n\t<!-- info on screen display -->\n\t<div id=\"info\">\n\t\t<div class=\"top\">\n\t\tLinks:\n\t\t\t<a href=\"https://github.com/rSimulate/WebHexPlanet\" target=\"_blank\">Github</a>\n\t\t\t&\n\t\t\t<a href=\"https://www.dropbox.com/home/rSIM\" target=\"_blank\">Dropbox</a>\n\t\t\t\n\t\t</div>\n\t\t\n\t\t\n\n\t\t\t\n\n\t\t\n\t\t<div class=\"bottom\" id=\"inlineDoc\" >\n\t\t\t- <i>p</i> for screenshot\n\t\t</div> \n\t</div> \n\t<script type=\"text/javascript\">\n\t\tvar stats, scene, renderer, composer;\n\t\tvar moongeometry,moonmaterial,moonmesh;\n\t\tvar camera, cameraControl;\n\t\tvar gui;\n\t\tvar mouse = { x: 0, y: 0};\n\n\t\tscene = new THREE.Scene();\n\t\tif( !init() )\tanimate();\n\n\t\t// init the scene\n\t\tfunction init(){\n\n\t\t\tif( Detector.webgl ){\n\t\t\t\trenderer = new THREE.WebGLRenderer({\n\t\t\t\t\tantialias\t\t: true,\t// to get smoother output\n\t\t\t\t\tpreserveDrawingBuffer\t: true\t// to allow screenshot\n\t\t\t\t});\n\t\t\t\trenderer.setClearColorHex( 0xBBBBBB, 1 );\n\t\t\t}else{\n\t\t\t\tDetector.addGetWebGLMessage();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\t\t\tdocument.getElementById('container').appendChild(renderer.domElement);\n\n\t\t\tstats = new Stats();\n\t\t\tstats.domElement.style.position\t= 'absolute';\n\t\t\tstats.domElement.style.bottom\t= '0px';\n\t\t\tdocument.body.appendChild( stats.domElement );\n\n\t\t\t// create a scene\n\t\t\t\n\t\t\t// Project and particle material for testing ray intersection (object picking)\n\t\t\tprojector = new THREE.Projector();\t\n\t\t\tparticleMaterial = new THREE.ParticleCanvasMaterial( {\n\t\t\t\t\tcolor: 0xFF0000,\n\t\t\t\t\tprogram: function ( context ) {\n\n\t\t\t\t\t\tcontext.beginPath();\n\t\t\t\t\t\tcontext.arc( 0, 0, 1, 0, PI2, true );\n\t\t\t\t\t\tcontext.closePath();\n\t\t\t\t\t\tcontext.fill();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t// put a camera in the scene\n\t\t\tcamera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, .01, 50000);\n\t\t\tcamera.position.set(0, 0, 15);\n\t\t\tscene.add(camera);\n\n\t\t\t// create a camera contol\n\t\t\tcameraControls\t= new THREE.OrbitControls( camera )\n\n\t\t\t// transparently support window resize\n\t\t\tTHREEx.WindowResize.bind(renderer, camera);\n\t\t\t// allow 'p' to make screenshot\n\t\t\tTHREEx.Screenshot.bindKey(renderer);\n\t\t\t// allow 'f' to go fullscreen where this feature is supported\n\t\t\tif( THREEx.FullScreen.available() ){\n\t\t\t\tTHREEx.FullScreen.bindKey();\t\t\n\t\t\t\tdocument.getElementById('inlineDoc').innerHTML\t+= \"- <i>f</i> for fullscreen\";\n\t\t\t}\n\n\t\t\tskymesh = drawSkyBox();\n\t\t\tlights();\n\t\t\tplanet = createPlanet(2); // DO NOT PUT ABOVE 3 THIS CLASS IS A WORK IN PROGRESS\n\t\t\tcreateMoon();\n\t\t}\n\n\t\t// animation loop\n\t\tfunction animate() {\n\n\t\t\t// loop on request animation loop\n\t\t\t// - it has to be at the begining of the function\n\t\t\t// - see details at http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n\t\t\trequestAnimationFrame( animate );\n\t\t\t\n\t\t\t// do the render\n\t\t\trender();\n\n\t\t\t// update stats\n\t\t\tstats.update();\n\t\t}\n\n\t\t// render the scene\n\t\tfunction render() {\n\t\t\t// variable which is increase by Math.PI every seconds - usefull for animation\n\t\t\tvar PIseconds\t= Date.now() * Math.PI;\n\t\t\tvar time = Date.now() / 50;\n\t\t\tvar semimajoraxis = 7;    \t\t// Turn into parameter\n\t\t\tvar eccentricity = 0.0549; \t\t// Turn into parameter\n\t\t\tvar angularvelocity = 0.03;\t\t// Turn into paratmeter\n\t\t\tvar orbitphase = angularvelocity * time;\n\t\t\tvar radius = semimajoraxis * ((1.0 - eccentricity^2)/(1.0 + eccentricity * Math.cos(orbitphase)));\n\t\t\tvar inclination = 6.0 ;\n\t\t\tvar incRadian = (inclination / 180.0) * Math.PI;\n\t\t\tvar maxH = 2;\n\t\t\tvar height = maxH * Math.cos(incRadian) * Math.sin(orbitphase);\n\t\t\tvar rotationspeed = 0.02; //need to study up on this relation to orbit and mass. \n\t\t\t\t\t\t\n\t\t\tmoonmesh.rotation.y += rotationspeed;\t// Moon rotation\n\t\t\t//Moon's orbit\n\t\t\tmoonmesh.position.x = radius * Math.cos(orbitphase);\n\t\t\tmoonmesh.position.z = radius * Math.sin(orbitphase);\n\t\t\tmoonmesh.position.y = height;\n\t\t\t\n\t\t\t//Planet Rotation\n\t\t\t//mesh.rotation.y += 0.01;\n\t\t\t\n\n\n\n\t\t\t// update camera controls\n\t\t\tcameraControls.update();\n\n\t\t\t// animation of all objects\n\t\t\t// TODO\n\n\t\t\tskymesh.position = camera.position;\n\n\t\t\t// actually render the scene\n\t\t\trenderer.render( scene, camera );\n\t\t}\n\n\n\t\tfunction setHexUVs(geometry){\n\t\t\tfor(var f in geometry.faceVertexUvs[0]){\n\t\t\t  \tvar uvs = geometry.faceVertexUvs[0][f];\n\t\t\t  \tuvs[0] = new THREE.Vector2(0.20, 0.73);\n\t\t\t  \tuvs[1] = new THREE.Vector2(0.51, 0.15);\n\t\t\t  \tuvs[2] = new THREE.Vector2(0.78, 0.70);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tfunction createMoon() { // had to move back to index.html for now\n\t\t\n\t\t\n\t\t\tvar planetgeometry\t= new THREE.IcosahedronGeometry(0.9, 4);\n\t\t\tvar material\t= new THREE.MeshLambertMaterial(\n\t\t\t\t\t\t\t{map: THREE.ImageUtils.loadTexture(\"images/moons/tethys.jpg\")});\n\t\t\tmoonmesh\t= new THREE.Mesh( planetgeometry, material ); \n\t\t\tmoonmesh.position.x = 15;\n\t\t\tmoonmesh.position.y = 0;\n\t\t\tscene.add( moonmesh );\n\n\n\t\t\tvar hexgeometry\t= new THREE.IcosahedronGeometry(0.91, 4);\n\n\t\t\tsetHexUVs(hexgeometry);\n\t\t\tvar material\t= new THREE.MeshLambertMaterial({\n\t\t\t\tmap: THREE.ImageUtils.loadTexture(\"images/hex02.png\"),\n\t\t\t\tcolor: 0xFFFFFF,\n\t\t\t\ttransparent: true,\n\t\t\t\topacity: 0.2\n\t\t\t\t});\n\n\t\t\t\n\t\t}\n\n\t\tdocument.addEventListener( 'mousemove', onDocumentMouseMove, false);\n\t\tfunction onDocumentMouseMove( event) {\n\t\t\tevent.preventDefault();\n\t\t\tmouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n\t\t\tmouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\t\t}\n\n\n\n\t\tdocument.addEventListener( 'mousedown', onDocumentMouseDown, false );\n\t\tfunction onDocumentMouseDown( event ) {\n\t\t    event.preventDefault();\n\t\t\n\t\t    var vector = new THREE.Vector3(mouse.x, mouse.y, 1);\n\t\t    projector.unprojectVector( vector, camera );\n\t\t\n\t\t\tvar raycaster = new THREE.Raycaster(\n\t\t\t\tcamera.position,\n\t\t\t\tvector.sub( camera.position ).normalize() );\n\n\t\t\tvar intersects = raycaster.intersectObjects( [planet] );\t\n\t\t    if ( intersects.length > 0 ) {\n\t\t\n\t\t\t\tvar v0 = intersects[ 0 ].object.geometry.vertices[intersects[ 0 ].face.a]\n\t\t\t\tvar v1 = intersects[ 0 ].object.geometry.vertices[intersects[ 0 ].face.b]\n\t\t\t\tvar v2 = intersects[ 0 ].object.geometry.vertices[intersects[ 0 ].face.c]\n\t\t\t\tvar geometry = new THREE.Geometry();\n\t\t\t    geometry.vertices.push(v0);\n\t\t\t    geometry.vertices.push(v1);\n\t\t\t    geometry.vertices.push(v2);\n\t\t\t    geometry.vertices.push(v0);\n\t\t\t\tvar material = new THREE.LineBasicMaterial({\n\t\t\t\t\tcolor: 0xFF0000});\n\t\t\t\tvar line = new THREE.Line(geometry, material);\n\t\t\t\tline.scale.x = 1.001;\n\t\t\t\tline.scale.y = 1.001;\n\t\t\t\tline.scale.z = 1.001;\n\t\t\t\tscene.add( line );\n\t\t\n\t\t    }\n\t\t}\t\t\n\t\t\n\t</script>\n</body>\n</html>\n"]],"start1":0,"start2":0,"length1":0,"length2":7459}]],"length":7459}
